goog.provide('colab.cell.AddCell');
goog.provide('colab.cell.AddCellEventType');

goog.require('colab.Shadow');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.style');
goog.require('goog.ui.Component');



/**
 * @enum {string} custom events generated by this object
 */
colab.cell.AddCellEventType = {
  CODE: 'add_code',
  TEXT: 'add_text'
};



/**
 * A small user interface element that adds new cells to specific locations in
 * a noteboook container.
 *
 * @param {!colab.drive.Permissions} permissions Drive permissions
 * @param {string} opt_cellId Id of cell that created the AddCell object. If
 * undefined, then AddCell is directly owned by the notebook.
 * @final @constructor @extends {goog.ui.Component}
 */
colab.cell.AddCell = function(permissions, opt_cellId) {
  goog.base(this);

  /** @type {Element} */
  this.addCode = null;

  /** @type {Element} */
  this.addText = null;

  /** @private @type {boolean} not yet used for anything */
  this.disabled_ = !(permissions.isEditable());

  /** @private @type {string|undefined} */
  this.cellId_ = opt_cellId;

  /** @private @type {boolean} */
  this.mouseOver_ = false;

  /** @private @type {number} */
  this.SHOW_DELAY_ = 1000;

  /** @private @type {number} */
  this.FADE_TIME_ = 200;

  /** @private @type {number} */
  this.NORMAL_Z_ = 2;

  /** @private @type {number} */
  this.CLICKED_Z_ = 3;
};
goog.inherits(colab.cell.AddCell, goog.ui.Component);


/**
 * @private @enum {string} button types this object contains
 */
colab.cell.AddCell.ButtonType_ = {
  ADD_CODE: 'code',
  ADD_TEXT: 'text'
};


/** @return {string|undefined} */
colab.cell.AddCell.prototype.getCellId = function() {
  return this.cellId_;
};


/** @override */
colab.cell.AddCell.prototype.createDom = function() {
  var element = goog.dom.createDom(goog.dom.TagName.DIV, 'add-cell');

  if (!this.disabled) {
    this.addCode = goog.dom.createDom(goog.dom.TagName.DIV, {
        'class': 'add-button add-code',
        'title': 'Add code cell'
      }, '+c;');
    goog.dom.appendChild(element, this.addCode);
    goog.style.setElementShown(this.addCode, false);

    this.addText = goog.dom.createDom(goog.dom.TagName.DIV, {
        'class': 'add-button add-text',
        'title': 'Add text cell'
      }, '+Tt');
    goog.dom.appendChild(element, this.addText);
    goog.style.setElementShown(this.addText, false);

    goog.dom.appendChild(element, goog.dom.createDom('hr'));

    /** @type {Object.<colab.cell.AddCell.ButtonType_, colab.Shadow>}*/
    this.shadow_ = {};
    this.shadow_[colab.cell.AddCell.ButtonType_.ADD_CODE] =
        new colab.Shadow(this.addCode, this.NORMAL_Z_);
    this.shadow_[colab.cell.AddCell.ButtonType_.ADD_TEXT] =
        new colab.Shadow(this.addText, this.NORMAL_Z_);
  }
  this.setElementInternal(element);
};


/** @private @param {boolean} value */
colab.cell.AddCell.prototype.setButtonsShown_ = function(value) {
  if (value) {
     jQuery([this.addText, this.addCode]).fadeIn(this.FADE_TIME_);
  } else {
     jQuery([this.addText, this.addCode]).fadeOut(this.FADE_TIME_);
  }
};


/**
 * Center buttons in the window.
 * @private
 */
colab.cell.AddCell.prototype.setButtonsLoc_ = function() {
  if (this.disabled) return;

  var center = goog.style.getSize(this.getElement()).width / 2;

  goog.style.setStyle(this.addCode, 'left', (center - 44) + 'px');
  goog.style.setStyle(this.addText, 'left', (center + 12) + 'px');
};


/**
 * Returns the button type of an element.
 * @param {Element} el
 * @return {colab.cell.AddCell.ButtonType_}
 * @private
 */
colab.cell.AddCell.prototype.getButtonType_ = function(el) {
  if (goog.dom.classlist.contains(el, 'add-code')) {
    return colab.cell.AddCell.ButtonType_.ADD_CODE;
  } else if (goog.dom.classlist.contains(el, 'add-text')) {
    return colab.cell.AddCell.ButtonType_.ADD_TEXT;
  } else {
    // default to play nice with the compiler
    return colab.cell.AddCell.ButtonType_.ADD_CODE;
  }
};


/**
 * Handle events generated by mouse clicks (click, down, up) on the buttons
 * @private @param {Event} e
 */
colab.cell.AddCell.prototype.handleClickEvents_ = function(e) {
  var targetEl = /** @type {Element} */ (e.target);
  var buttonType = this.getButtonType_(targetEl);

  if (e.type === goog.events.EventType.CLICK) {
    e.stopPropagation();

    if (!this.disabled_) {

      if (buttonType === colab.cell.AddCell.ButtonType_.ADD_CODE) {
        this.dispatchEvent(colab.cell.AddCellEventType.CODE);
      } else if (buttonType === colab.cell.AddCell.ButtonType_.ADD_TEXT) {
        this.dispatchEvent(colab.cell.AddCellEventType.TEXT);
      }
    }

  } else if (e.type === goog.events.EventType.MOUSEDOWN) {
    this.styleClickedButton_(targetEl, true);
  } else if (e.type === goog.events.EventType.MOUSEUP ||
             e.type === goog.events.EventType.MOUSELEAVE) {
    this.styleClickedButton_(targetEl, false);
  }
};


/**
 * @param {Element} el the button clicked
 * @param {boolean} value true = clicked, false = unclicked
 * @private
 */
colab.cell.AddCell.prototype.styleClickedButton_ = function(el, value) {
  var type = this.getButtonType_(el);
  if (value) {
    goog.style.setStyle(el, 'background-color', 'lightgrey');
    this.shadow_[type].setZ(this.CLICKED_Z_);
  } else {
    goog.style.setStyle(el, 'background-color', 'white');
    this.shadow_[type].setZ(this.NORMAL_Z_);
  }
};


/**
 * Handle window size change by re-centering buttons. Called by ancestor/parent
 * notebook container.
 */
colab.cell.AddCell.prototype.onWindowResize = function() {
  this.setButtonsLoc_();
};


/** @override */
colab.cell.AddCell.prototype.enterDocument = function() {
  goog.base(this, 'enterDocument');

  this.setButtonsLoc_();

  if (!this.disabled) {
    var handler = this.getHandler();
    handler.listen(this.getElement(), goog.events.EventType.MOUSEENTER,
        function(e) {
          this.mouseOver_ = true;
          var showWithDelay = goog.bind(function() {
            if (this.mouseOver_) this.setButtonsShown_(true);
          }, this);
          setTimeout(showWithDelay, this.SHOW_DELAY_);
        });

    handler.listen(this.getElement(), goog.events.EventType.MOUSELEAVE,
        function(e) {
          this.mouseOver_ = false;
          this.setButtonsShown_(false);
        });

    var mouseEvents = [goog.events.EventType.CLICK,
        goog.events.EventType.MOUSEDOWN, goog.events.EventType.MOUSEUP,
        goog.events.EventType.MOUSELEAVE];

    [this.addCode, this.addText].forEach(
      function(button) {
        handler.listenWithScope(button, mouseEvents, this.handleClickEvents_,
          false, this);
    }, this);
  }
};

